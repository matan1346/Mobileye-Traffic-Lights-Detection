import json
import argparse

from scipy import ndimage
from scipy.ndimage.filters import maximum_filter
import numpy as np
from PIL import Image

import matplotlib.pyplot as plt


def plot(data, title):
    plot.i += 1
    if plot.ax is None:
        plot.ax = plt.subplot(2, 2, plot.i)
    else:
        plt.subplot(2, 2, plot.i, sharex=plot.ax, sharey=plot.ax)
    plt.imshow(data)
    plt.gray()
    plt.title(title)


plot.i = 0
plot.ax = None


def find_tfl_lights2(c_image: np.ndarray, **kwargs):
    """
    Detect candidates for TFL lights. Use c_image, kwargs and you imagination to implement
    :param c_image: The image itself as np.uint8, shape of (H, W, 3)
    :param kwargs: Whatever config you want to pass in here
    :return: 4-tuple of x_red, y_red, x_green, y_green
    """
    data = c_image[:, :, 0].astype(float)
    data1 = c_image[:, :, 1].astype(float)
    data2 = c_image[:, :, 2].astype(float)

    kernel_1 = np.array([
        [51, 46, 57, 65, 72, 84, 95, 101, 99, 94, 88, 77, 58],
        [57, 58, 82, 74, 97, 120, 133, 145, 150, 134, 108, 104, 68],
        [70, 73, 99, 115, 145, 175, 192, 205, 210, 192, 167, 138, 98],
        [87, 95, 123, 159, 196, 231, 250, 255, 255, 248, 229, 183, 135],
        [102, 116, 143, 194, 226, 255, 255, 255, 255, 255, 255, 222, 167],
        [110, 126, 156, 221, 245, 255, 255, 255, 255, 255, 255, 247, 188],
        [109, 128, 156, 242, 255, 255, 255, 248, 255, 255, 255, 255, 194],
        [104, 122, 152, 242, 255, 255, 255, 251, 255, 255, 255, 247, 187],
        [99, 117, 146, 230, 250, 255, 255, 255, 255, 255, 255, 235, 174],
        [82, 103, 120, 193, 227, 255, 255, 255, 255, 255, 252, 177, 146],
        [74, 88, 100, 136, 177, 228, 255, 255, 255, 236, 203, 149, 121],
        [69, 75, 80, 79, 114, 163, 201, 224, 214, 177, 137, 108, 90],
        [72, 69, 69, 60, 74, 92, 112, 129, 130, 113, 89, 76, 65]])

    kernel_2 = np.array([[87., 110., 118., 123., 118., 100., 76., 58., 48., 61., 60.,
                          59., 60., 61., 61., 59., 57., 57., 51., 43., 35., 28.,
                          24., 21., 20., 23., 24., 24., 26., 28., 30., 33., 33.,
                          53.],
                         [107., 125., 123., 115., 97., 75., 60., 55., 58., 64., 66.,
                          69., 74., 79., 80., 77., 73., 79., 74., 64., 52., 42.,
                          32., 25., 21., 22., 23., 23., 25., 27., 30., 33., 34.,
                          65.],
                         [117., 128., 119., 102., 78., 60., 58., 71., 84., 79., 78.,
                          80., 83., 91., 97., 100., 102., 100., 96., 85., 72., 56.,
                          42., 30., 23., 21., 22., 22., 25., 28., 31., 33., 35.,
                          66.],
                         [121., 114., 106., 87., 67., 58., 69., 94., 117., 112., 105.,
                          97., 92., 96., 105., 113., 117., 115., 110., 100., 86., 68.,
                          50., 34., 25., 22., 22., 23., 24., 27., 30., 33., 34.,
                          51.],
                         [116., 118., 86., 66., 67., 75., 93., 110., 114., 118., 114.,
                          111., 107., 100., 106., 134., 164., 123., 119., 116., 110., 90.,
                          63., 47., 44., 34., 27., 21., 21., 24., 28., 30., 30.,
                          35.],
                         [114., 101., 75., 66., 76., 87., 97., 105., 107., 108., 110.,
                          114., 117., 118., 124., 148., 173., 149., 135., 121., 112., 99.,
                          81., 69., 64., 38., 31., 22., 20., 22., 27., 30., 31.,
                          39.],
                         [109., 87., 69., 73., 94., 103., 104., 106., 106., 119., 123.,
                          129., 138., 143., 153., 173., 191., 191., 167., 140., 128., 120.,
                          103., 83., 66., 44., 35., 24., 20., 22., 26., 29., 31.,
                          40.],
                         [102., 84., 75., 88., 108., 109., 108., 115., 121., 164., 164.,
                          166., 171., 181., 195., 214., 227., 219., 193., 165., 154., 148.,
                          131., 99., 70., 54., 42., 28., 22., 21., 25., 28., 31.,
                          37.],
                         [91., 79., 81., 95., 107., 101., 105., 124., 136., 185., 185.,
                          185., 194., 209., 231., 246., 253., 227., 207., 182., 170., 165.,
                          152., 123., 95., 66., 52., 35., 23., 20., 23., 27., 30.,
                          35.],
                         [81., 72., 79., 93., 96., 96., 113., 137., 142., 153., 154.,
                          156., 169., 196., 226., 243., 246., 242., 227., 202., 178., 163.,
                          148., 129., 108., 79., 62., 42., 26., 21., 22., 27., 28.,
                          32.],
                         [73., 70., 81., 94., 98., 112., 145., 161., 148., 121., 114.,
                          107., 117., 152., 197., 228., 237., 246., 243., 223., 190., 159.,
                          136., 119., 105., 91., 73., 47., 28., 21., 21., 25., 27.,
                          28.],
                         [68., 75., 87., 100., 108., 137., 179., 186., 156., 124., 106.,
                          85., 85., 124., 182., 226., 244., 229., 239., 233., 202., 164.,
                          134., 116., 103., 98., 78., 52., 30., 21., 20., 24., 26.,
                          22.],
                         [68., 79., 99., 98., 90., 120., 168., 176., 149., 127., 107.,
                          92., 102., 110., 159., 235., 255., 238., 242., 234., 203., 160.,
                          124., 107., 103., 101., 76., 44., 25., 19., 23., 25., 26.,
                          31.],
                         [65., 84., 98., 96., 90., 116., 157., 167., 148., 149., 138.,
                          126., 130., 123., 149., 210., 222., 224., 224., 212., 182., 140.,
                          110., 99., 98., 94., 76., 49., 30., 23., 23., 24., 25.,
                          31.],
                         [60., 84., 90., 88., 90., 112., 145., 160., 155., 170., 163.,
                          151., 149., 139., 159., 217., 233., 228., 224., 203., 166., 121.,
                          91., 79., 79., 87., 73., 53., 35., 26., 23., 23., 27.,
                          35.],
                         [57., 78., 80., 81., 91., 112., 138., 160., 170., 179., 170.,
                          151., 149., 150., 178., 237., 255., 242., 233., 207., 166., 119.,
                          87., 74., 73., 83., 72., 53., 36., 25., 23., 26., 31.,
                          39.],
                         [58., 78., 79., 83., 94., 110., 132., 157., 176., 185., 178.,
                          160., 166., 175., 193., 233., 240., 240., 230., 206., 167., 126.,
                          97., 83., 82., 83., 71., 50., 31., 20., 21., 29., 36.,
                          42.],
                         [60., 82., 84., 90., 99., 107., 123., 149., 171., 180., 187.,
                          184., 201., 213., 215., 225., 214., 232., 220., 195., 158., 120.,
                          93., 81., 81., 81., 66., 45., 27., 20., 23., 30., 35.,
                          39.],
                         [62., 77., 86., 95., 99., 104., 120., 146., 168., 169., 185.,
                          187., 206., 216., 212., 218., 210., 218., 204., 174., 137., 102.,
                          83., 78., 80., 77., 61., 41., 27., 23., 26., 29., 29.,
                          33.],
                         [60., 67., 82., 94., 97., 103., 121., 149., 171., 163., 176.,
                          169., 177., 181., 181., 200., 205., 193., 178., 151., 118., 92.,
                          83., 87., 94., 72., 55., 38., 28., 29., 30., 28., 23.,
                          28.],
                         [55., 71., 80., 89., 94., 100., 110., 125., 138., 177., 181.,
                          182., 180., 178., 176., 166., 156., 131., 119., 105., 98., 96.,
                          97., 93., 85., 70., 50., 33., 29., 30., 31., 28., 27.,
                          34.],
                         [46., 66., 74., 82., 87., 93., 102., 113., 123., 153., 156.,
                          155., 150., 144., 139., 129., 119., 100., 94., 89., 89., 93.,
                          95., 93., 85., 59., 41., 29., 27., 29., 29., 29., 31.,
                          68.],
                         [36., 56., 64., 73., 80., 84., 91., 98., 106., 113., 116.,
                          114., 111., 109., 108., 101., 93., 85., 84., 83., 86., 89.,
                          85., 76., 66., 43., 32., 26., 25., 25., 26., 30., 36.,
                          103.],
                         [32., 47., 54., 64., 73., 78., 83., 89., 94., 90., 93.,
                          92., 88., 88., 91., 87., 81., 82., 84., 85., 86., 83.,
                          75., 61., 49., 30., 26., 25., 26., 25., 25., 31., 41.,
                          117.],
                         [34., 37., 45., 54., 65., 73., 80., 83., 88., 90., 90.,
                          85., 79., 76., 78., 75., 71., 74., 78., 79., 79., 74.,
                          64., 51., 41., 25., 24., 27., 29., 26., 25., 32., 42.,
                          112.],
                         [38., 31., 37., 45., 56., 64., 73., 76., 79., 77., 78.,
                          72., 65., 66., 70., 71., 68., 73., 73., 71., 64., 54.,
                          43., 32., 25., 25., 25., 28., 30., 28., 25., 29., 37.,
                          97.],
                         [41., 28., 31., 36., 45., 54., 61., 65., 66., 60., 60.,
                          54., 49., 52., 62., 66., 66., 70., 67., 58., 47., 35.,
                          26., 21., 19., 27., 25., 26., 29., 27., 23., 24., 29.,
                          75.],
                         [40., 27., 28., 30., 36., 44., 51., 53., 56., 59., 56.,
                          48., 41., 41., 48., 52., 51., 54., 51., 44., 35., 27.,
                          26., 28., 32., 29., 26., 25., 28., 26., 22., 20., 22.,
                          56.]])

    kernel_3 = np.array([[81., 68., 62., 90., 106., 119., 121., 128., 132., 135., 131.,
                          129., 121., 115., 96., 84., 71., 77.],
                         [92., 77., 88., 99., 114., 127., 205., 217., 255., 247., 242.,
                          207., 180., 140., 124., 95., 92., 100.],
                         [98., 104., 113., 137., 138., 188., 228., 255., 255., 255., 255.,
                          255., 219., 184., 139., 130., 108., 111.],
                         [120., 128., 200., 209., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 251., 236., 186., 160., 133.],
                         [129., 141., 214., 223., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 210., 186., 143.],
                         [149., 162., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 220., 159.],
                         [157., 176., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 244., 173.],
                         [170., 198., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 255., 177.],
                         [172., 218., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 255., 184.],
                         [173., 211., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 255., 178.],
                         [165., 212., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 250., 168.],
                         [147., 194., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 229., 157.],
                         [142., 175., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 249., 205., 143.],
                         [129., 153., 203., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 222., 179., 129.],
                         [110., 120., 114., 203., 250., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 252., 176., 147., 115.],
                         [99., 107., 118., 106., 160., 233., 255., 255., 255., 255., 255.,
                          255., 255., 243., 200., 145., 124., 98.],
                         [82., 86., 101., 113., 100., 163., 216., 255., 255., 255., 255.,
                          222., 183., 169., 127., 105., 80., 79.],
                         [71., 69., 76., 84., 93., 88., 124., 200., 186., 213., 185.,
                          160., 140., 124., 104., 69., 67., 58.]])

    kernel_1 = (kernel_1 - kernel_1.mean()) / 1e5
    kernel_2 = (kernel_2 - kernel_2.mean()) / 1e5
    kernel_3 = (kernel_3 - kernel_3.mean()) / 1e5

    highpass_3x3 = ndimage.convolve(data, kernel_1, mode='reflect')
    highpass_3x31 = ndimage.convolve(data1, kernel_2, mode='reflect')
    highpass_3x32 = ndimage.convolve(data2, kernel_3, mode='reflect')

    filtered = maximum_filter(highpass_3x3, size=30)

    y = filtered.shape[0]
    x = filtered.shape[1]
    red_x = []
    red_y = []
    green_x = []
    green_y = []

    maximum_number = 0
    maximum_number1 = 0
    maximum_number2 = 0
    for i in range(x):
        for j in range(y):
            if highpass_3x3[j, i] > maximum_number:
                maximum_number = highpass_3x3[j, i]
            if highpass_3x31[j, i] > maximum_number1:
                maximum_number1 = highpass_3x31[j, i]
            if highpass_3x32[j, i] > maximum_number2:
                maximum_number2 = highpass_3x32[j, i]

    for i in range(x):
        for j in range(y):
            if highpass_3x3[j, i] >= maximum_number - 1:
                red_x.append(i)
                red_y.append(j)
            if highpass_3x32[j, i] > maximum_number2 - 1:
                red_x.append(i)
                red_y.append(j)

    return red_x, red_y, green_x, green_y



def find_tfl_lights(c_image: np.ndarray, **kwargs):
    """
    Detect candidates for TFL lights. Use c_image, kwargs and you imagination to implement
    :param c_image: The image itself as np.uint8, shape of (H, W, 3)
    :param kwargs: Whatever config you want to pass in here
    :return: 4-tuple of x_red, y_red, x_green, y_green
    """
    data = c_image[:, :, 0].astype(float)
    data1 = c_image[:, :, 1].astype(float)
    data2 = c_image[:, :, 2].astype(float)

    kernel_3 = np.array([[81., 68., 62., 90., 106., 119., 121., 128., 132., 135., 131.,
                          129., 121., 115., 96., 84., 71., 77.],
                         [92., 77., 88., 99., 114., 127., 205., 217., 255., 247., 242.,
                          207., 180., 140., 124., 95., 92., 100.],
                         [98., 104., 113., 137., 138., 188., 228., 255., 255., 255., 255.,
                          255., 219., 184., 139., 130., 108., 111.],
                         [120., 128., 200., 209., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 251., 236., 186., 160., 133.],
                         [129., 141., 214., 223., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 210., 186., 143.],
                         [149., 162., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 220., 159.],
                         [157., 176., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 244., 173.],
                         [170., 198., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 255., 177.],
                         [172., 218., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 255., 184.],
                         [173., 211., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 255., 178.],
                         [165., 212., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 250., 168.],
                         [147., 194., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 255., 229., 157.],
                         [142., 175., 255., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 249., 205., 143.],
                         [129., 153., 203., 255., 255., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 255., 222., 179., 129.],
                         [110., 120., 114., 203., 250., 255., 255., 255., 255., 255., 255.,
                          255., 255., 255., 252., 176., 147., 115.],
                         [99., 107., 118., 106., 160., 233., 255., 255., 255., 255., 255.,
                          255., 255., 243., 200., 145., 124., 98.],
                         [82., 86., 101., 113., 100., 163., 216., 255., 255., 255., 255.,
                          222., 183., 169., 127., 105., 80., 79.],
                         [71., 69., 76., 84., 93., 88., 124., 200., 186., 213., 185.,
                          160., 140., 124., 104., 69., 67., 58.]])

    #kernel = (kernel_3 - kernel_3.mean()) / 1e5

    kernel_2 = (kernel_3 - kernel_3.mean()) / 1e5

    kernel_3 = (kernel_3 - kernel_3.mean()) / 1e5

    highpass_3x3 = ndimage.convolve(data, kernel_3, mode='reflect')
    highpass_3x31 = ndimage.convolve(data1, kernel_2, mode='reflect')
    highpass_3x32 = ndimage.convolve(data2, kernel_3, mode='reflect')

    filtered = maximum_filter(highpass_3x3, (5, 5))


    y = filtered.shape[0]
    x = filtered.shape[1]
    red_x = []
    red_y = []
    green_x = []
    green_y = []
    maximum_number = 0
    maximum_number1 = 0
    maximum_number2 = 0
    for i in range(x):
        for j in range(y):
            if highpass_3x3[j, i] > maximum_number:
                maximum_number = highpass_3x3[j, i]
            if highpass_3x31[j, i] > maximum_number1:
                maximum_number1 = highpass_3x31[j, i]
            if highpass_3x32[j, i] > maximum_number2:
                maximum_number2 = highpass_3x32[j, i]

    i = 0
    while i < x:
        j = 0
        while j < y:
            if highpass_3x3[j, i] >= maximum_number - 1.5 or highpass_3x31[j, i] >= maximum_number1 - 1.5 or \
                    highpass_3x32[j, i] >= maximum_number2 - 1.5:
                red_x.append(i)
                red_y.append(j)
                i += 40
                j += 40
            j += 1
        i += 1
    return red_x, red_y, green_x, green_y


# GIVEN CODE TO TEST YOUR IMPLENTATION AND PLOT THE PICTURES
def show_image_and_gt(image, objs, fig_num=None):
    plt.figure(fig_num).clf()
    plt.imshow(image)
    labels = set()
    if objs is not None:
        for o in objs:
            poly = np.array(o['polygon'])[list(np.arange(len(o['polygon']))) + [0]]
            plt.plot(poly[:, 0], poly[:, 1], 'r', label=o['label'])
            labels.add(o['label'])
        if len(labels) > 1:
            plt.legend()


def test_find_tfl_lights(image_path, json_path=None, fig_num=None):
    """
    Run the attention code
    """
    image = np.array(Image.open(image_path))
    if json_path is None:
        objects = None
    else:
        gt_data = json.load(open(json_path))
        what = ['traffic light']
        objects = [o for o in gt_data['objects'] if o['label'] in what]

    show_image_and_gt(image, objects, fig_num)
    red_x, red_y, green_x, green_y = find_tfl_lights(image)
    red_set = set(zip(red_x, red_y))

    candidates = list(red_set)  # list(red_set.union(green_set))

    return np.array(candidates)


def main(argv=None, **kwargs):
    """It's nice to have a standalone tester for the algorithm.
    Consider looping over some images from here, so you can manually exmine the results
    Keep this functionality even after you have all system running, because you sometime want to debug/improve a module
    :param argv: In case you want to programmatically run this"""

    parser = argparse.ArgumentParser("Test TFL attention mechanism")
    parser.add_argument('-i', '--image', type=str, help='Path to an image')
    parser.add_argument("-j", "--json", type=str, help="Path to json GT for comparison")
    parser.add_argument('-d', '--dir', type=str, help='Directory to scan images in')

    return test_find_tfl_lights('../' + kwargs['image'])


if __name__ == '__main__':
    main()
